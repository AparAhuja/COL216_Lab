Integer Registers:

v0: used for making different syscalls
a0: used in making syscalls (outputting/inputting strings and integers)
a1: used in reading input string (buffer length)

t0: used to store the buffer counter (address of current character in buffer)
t1: used to store the number of elements in the array (stack)
t2: stores the integer counterpart of the character loaded from buffer (e.g. '0' -> 0)
t3: stores the character (byte) loaded from the expression buffer
t4: stores the array memory offset (to read/write to a particular address in array)
t5: stores the right operand while carrying out any computation
t6: stores the left operand while carrying out any computation
t7: temporarily stores the result of computation, and it is also used for making trivial comparisons
t8: used to detect overflow in case of multiplication

s0: stores ASCII code of 0 (48)
s1: stores ASCII code of 9 (57)
s2: stores ASCII code of * (42)
S3: stores ASCII code of + (43)
s4: stores ASCII code of - (45)
s5: stores ASCII code of '\n' (10)
s6: stores the offset factor for integers (4)

Memory part:
# array used for implementing stack (max. 160 integers)
array: .space 640
	
# character buffer used to store the input string
expression: .space 160
	
# invalid character error
error_invalidChar: .asciiz "\nERROR: There is an invalid character present in the expression.\nMake sure that the operands are in the range 0-9, and only +, - and * operators are used.\nProgram terminating!"

# illegal expression error
error_illegalExp: .asciiz "\nERROR: The number of operands and number of operators do not match.\nMake sure that the operands are in the range 0-9, and that for each operator exactly 2 operands are provided.\nProgram terminating!"
    
# overflow error (integer overflow, over 32 bits)
error_overflow: .asciiz "\nERROR: Arithmetic Overflow"

# input message
msg_input: .asciiz "Enter the postfix expression that needs to be evaluated: "

# output message
msg_output: .asciiz "\nThe value of the postfix expression is: "

# separator and newline string
msg_separator: .asciiz "\n\n_______________________________________________________________\n\n"
msg_lf: .asciiz "\n"